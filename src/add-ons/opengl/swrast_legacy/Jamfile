SubDir HAIKU_TOP src add-ons opengl swrast_legacy ;

SetSubDirSupportedPlatformsBeOSCompatible ;

if $(TARGET_PLATFORM) != haiku {
	UseHeaders [ FDirName $(HAIKU_TOP) headers os opengl ] : true ;
		# We need our public GL headers also when not compiling for Haiku.
}


{
	local defines ;
	defines = BEOS_THREADS GNU_ASSEMBLER ;

	if $(TARGET_ARCH) = x86 {
		defines += USE_X86_ASM USE_MMX_ASM USE_3DNOW_ASM USE_SSE_ASM ;
	} else if $(TARGET_ARCH) = ppc {
		# Not yet supported, as current Mesa3D PPC assembly is Linux-dependent!
		# defines += USE_PPC_ASM ;
	} else if $(TARGET_ARCH) = sparc {
		defines += USE_SPARC_ASM ;
	}

	SubDirC++Flags [ FDefines $(defines) ] ;
}


local sources = MesaSoftwareRenderer.cpp ;

UsePrivateHeaders interface ;
UseBuildFeatureHeaders mesa ;
Includes [ FGristFiles $(sources) ] : [ BuildFeatureAttribute mesa : headers ] ;

UseHeaders [ BuildFeatureAttribute mesa : headers : path ] ;
local privateHeaders = [ BuildFeatureAttribute mesa : privateHeaders : path ] ;
UseHeaders [ FDirName $(privateHeaders) mesa ] ;
UseHeaders [ FDirName $(privateHeaders) mesa main ] ;
UseHeaders [ FDirName $(privateHeaders) mapi ] ;
UseHeaders [ FDirName $(privateHeaders) mapi glapi ] ;

# For older versions of Mesa
UseHeaders [ FDirName $(privateHeaders) mesa glapi ] ;
UseHeaders [ FDirName $(privateHeaders) mesa tnl ] ;
UseHeaders [ FDirName $(privateHeaders) mesa x86 ] ;


AddResources Legacy\ Software\ Rasterizer : MesaSoftwareRenderer.rdef ;

Addon Legacy\ Software\ Rasterizer :
	$(sources)
	:
	[ BuildFeatureAttribute mesa : mesaLibrary ]
	libGL.so be $(TARGET_LIBSUPC++)
;
