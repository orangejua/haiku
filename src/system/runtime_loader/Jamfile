SubDir HAIKU_TOP src system runtime_loader ;

local architecture = $(TARGET_PACKAGING_ARCH) ;

UsePrivateHeaders libroot runtime_loader shared ;
UsePrivateHeaders kernel ;
	# for <util/KMessage.h>
UsePrivateSystemHeaders ;

# Don't let gcc inject built-in function code. This will cause dependencies
# to libroot, which we don't link against.
SubDirCcFlags -fno-builtin ;
SubDirC++Flags -fno-builtin -fno-exceptions ;

DEFINES +=
	KMESSAGE_CONTAINER_ONLY
	_LOADER_MODE
	USING_LIBGCC=1
;

AddResources runtime_loader : runtime_loader.rdef ;

# needed for "runtime_loader" only
StaticLibrary libruntime_loader.a :
	kernel_vsprintf.cpp
	kernel_cpp.cpp
	KMessage.cpp
	:
	<src!system!libroot!os!$(architecture)>mutex.o
	<src!system!libroot!os!$(architecture)>recursive_lock.o
	<src!system!libroot!os!$(architecture)>syscalls.o
	<src!system!libroot!os!$(architecture)>sem.o

	<src!system!libroot!posix!$(architecture)>errno.o
  	<src!system!libroot!posix!$(architecture)>fcntl.o

	<src!system!libroot!posix!locale!$(architecture)>ctype.o
	<src!system!libroot!posix!locale!$(architecture)>LocaleData.o

	<src!system!libroot!posix!string!$(architecture)>memchr.o
	<src!system!libroot!posix!string!$(architecture)>memcmp.o
	<src!system!libroot!posix!string!$(architecture)>memmove.o
	<src!system!libroot!posix!string!$(architecture)>strcasecmp.o
	<src!system!libroot!posix!string!$(architecture)>strcat.o
	<src!system!libroot!posix!string!$(architecture)>strchr.o
	<src!system!libroot!posix!string!$(architecture)>strcmp.o
	<src!system!libroot!posix!string!$(architecture)>strcpy.o
	<src!system!libroot!posix!string!$(architecture)>strcspn.o
	<src!system!libroot!posix!string!$(architecture)>strdup.o
	<src!system!libroot!posix!string!$(architecture)>strerror.o
	<src!system!libroot!posix!string!$(architecture)>strlcat.o
	<src!system!libroot!posix!string!$(architecture)>strlcpy.o
	<src!system!kernel!lib>strlen.o
	<src!system!libroot!posix!string!$(architecture)>strncmp.o
	<src!system!libroot!posix!string!$(architecture)>strnlen.o
	<src!system!libroot!posix!string!$(architecture)>strpbrk.o
	<src!system!libroot!posix!string!$(architecture)>strrchr.o
	<src!system!libroot!posix!string!$(architecture)>strspn.o
	<src!system!libroot!posix!string!$(architecture)>strstr.o

	[ FGristFiles kernel_vsprintf.o ]
;

SEARCH on [ FGristFiles kernel_cpp.cpp ]
	= [ FDirName $(HAIKU_TOP) src system kernel util ] ;
SEARCH on [ FGristFiles kernel_vsprintf.cpp ]
	= [ FDirName $(HAIKU_TOP) src system kernel lib ] ;
SEARCH on [ FGristFiles KMessage.cpp ]
	= [ FDirName $(HAIKU_TOP) src system kernel messaging ] ;


local sources =
	add_ons.cpp
	elf.cpp
	elf_haiku_version.cpp
	elf_load_image.cpp
	elf_symbol_lookup.cpp
	elf_versioning.cpp
	errors.cpp
	export.cpp
	heap.cpp
	images.cpp
	runtime_loader.cpp
	utility.cpp
;

Objects $(sources) ;

Ld runtime_loader :
	[ FGristFiles $(sources:S=$(SUFOBJ)) ]
	libruntime_loader.a
	libruntime_loader_$(TARGET_ARCH).a
	$(HAIKU_STATIC_LIBSUPC++_$(TARGET_PACKAGING_ARCH))
	$(HAIKU_GCC_LIBGCC_$(TARGET_PACKAGING_ARCH))
	: $(HAIKU_TOP)/src/system/ldscripts/$(TARGET_ARCH)/runtime_loader.ld
	: --no-undefined -shared -soname=runtime_loader
;

HaikuSubInclude arch $(TARGET_ARCH) ;
