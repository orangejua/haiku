SubDir HAIKU_TOP src kits opengl ;

SetSubDirSupportedPlatformsBeOSCompatible ;

local sources =
	GLView.cpp
	GLDispatcher.cpp
	GLRenderer.cpp
	GLRendererRoster.cpp
	;


if $(TARGET_PLATFORM) != haiku {
	UseHeaders [ FDirName $(HAIKU_TOP) headers os opengl ] : true ;
		# We need our public GL headers also when not compiling for Haiku.
}

local architectureObject ;
for architectureObject in [ MultiArchSubDirSetup ] {
	on $(architectureObject) {
		local architecture = $(TARGET_PACKAGING_ARCH) ;

		UsePrivateHeaders interface ;
		UsePrivateSystemHeaders ;
		UseBuildFeatureHeaders glu ;
		UseBuildFeatureHeaders mesa ;

		Includes [ FGristFiles $(sources) ]
			: [ BuildFeatureAttribute glu : headers ] ;
		Includes [ FGristFiles $(sources) ]
			: [ BuildFeatureAttribute mesa : headers ] ;

		UseHeaders [ BuildFeatureAttribute mesa : headers : path ] ;
		local privateHeaders
			= [ BuildFeatureAttribute mesa : privateHeaders : path ] ;
		UseHeaders [ FDirName $(privateHeaders) mesa ] ;
		UseHeaders [ FDirName $(privateHeaders) mesa main ] ;
		UseHeaders [ FDirName $(privateHeaders) mapi ] ;
		UseHeaders [ FDirName $(privateHeaders) mapi glapi ] ;

		# For older versions of Mesa
		UseHeaders [ FDirName $(privateHeaders) mesa glapi ] ;

		LINKFLAGS on libGL.so = [ on libGL.so return $(LINKFLAGS) ]
			-Xlinker --whole-archive -Xlinker --no-undefined ;

		# For GCC2
		if $(architecture) = x86_gcc2 {
			SubDirC++Flags --no-warnings ;
		}

		SharedLibrary [ MultiArchDefaultGristFiles libGL.so ] : $(sources) :
			# GLU
			[ BuildFeatureAttribute glu : library ]

			# GLAPI Dispatch code (from Mesa buildpackage)
			[ BuildFeatureAttribute mesa : glapiLibrary ]

			# External libraries:
			game			# BWindowScreen needed by BGLScreen stub class
			network
			be
			$(TARGET_LIBSTDC++)
			;
	}
}
